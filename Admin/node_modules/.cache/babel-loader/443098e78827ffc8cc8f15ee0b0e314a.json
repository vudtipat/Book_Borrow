{"ast":null,"code":"import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\n\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      _props$groupSeparator = props.groupSeparator,\n      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n      prefixCls = props.prefixCls;\n  var valueNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells) {\n      valueNode = val;\n    } else {\n      var int = cells[1] || '0';\n      var decimal = cells[3] || '';\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision);\n      }\n\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n\n      valueNode = [React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, int), decimal && React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\n\nexport default StatisticNumber;","map":{"version":3,"sources":["E:/web/bookstore/node_modules/antd/es/statistic/Number.js"],"names":["React","padEnd","StatisticNumber","props","value","formatter","precision","decimalSeparator","_props$groupSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","int","decimal","replace","slice","concat","createElement","key","className"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACpD,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,gBAAgB,GAAGJ,KAAK,CAACI,gBAH7B;AAAA,MAIIC,qBAAqB,GAAGL,KAAK,CAACM,cAJlC;AAAA,MAKIA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAL7D;AAAA,MAMIE,SAAS,GAAGP,KAAK,CAACO,SANtB;AAOA,MAAIC,SAAJ;;AAEA,MAAI,OAAON,SAAP,KAAqB,UAAzB,EAAqC;AACnC;AACAM,IAAAA,SAAS,GAAGN,SAAS,CAACD,KAAD,CAArB;AACD,GAHD,MAGO;AACL;AACA,QAAIQ,GAAG,GAAGC,MAAM,CAACT,KAAD,CAAhB;AACA,QAAIU,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,mBAAV,CAAZ,CAHK,CAGuC;;AAE5C,QAAI,CAACD,KAAL,EAAY;AACVH,MAAAA,SAAS,GAAGC,GAAZ;AACD,KAFD,MAEO;AACL,UAAII,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;AACA,UAAIG,OAAO,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACAE,MAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCT,cAArC,CAAN;;AAEA,UAAI,OAAOH,SAAP,KAAqB,QAAzB,EAAmC;AACjCW,QAAAA,OAAO,GAAGhB,MAAM,CAACgB,OAAD,EAAUX,SAAV,EAAqB,GAArB,CAAN,CAAgCa,KAAhC,CAAsC,CAAtC,EAAyCb,SAAzC,CAAV;AACD;;AAED,UAAIW,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,GAAGG,MAAH,CAAUb,gBAAV,EAA4Ba,MAA5B,CAAmCH,OAAnC,CAAV;AACD;;AAEDN,MAAAA,SAAS,GAAG,CAACX,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AACvCC,QAAAA,GAAG,EAAE,KADkC;AAEvCC,QAAAA,SAAS,EAAE,GAAGH,MAAH,CAAUV,SAAV,EAAqB,oBAArB;AAF4B,OAA5B,EAGVM,GAHU,CAAD,EAGHC,OAAO,IAAIjB,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AAC9CC,QAAAA,GAAG,EAAE,SADyC;AAE9CC,QAAAA,SAAS,EAAE,GAAGH,MAAH,CAAUV,SAAV,EAAqB,wBAArB;AAFmC,OAA5B,EAGjBO,OAHiB,CAHR,CAAZ;AAOD;AACF;;AAED,SAAOjB,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AACjCE,IAAAA,SAAS,EAAE,GAAGH,MAAH,CAAUV,SAAV,EAAqB,gBAArB;AADsB,GAA5B,EAEJC,SAFI,CAAP;AAGD,CA9CD;;AAgDA,eAAeT,eAAf","sourcesContent":["import * as React from 'react';\nimport padEnd from 'lodash/padEnd';\n\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      _props$groupSeparator = props.groupSeparator,\n      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n      prefixCls = props.prefixCls;\n  var valueNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells) {\n      valueNode = val;\n    } else {\n      var int = cells[1] || '0';\n      var decimal = cells[3] || '';\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision);\n      }\n\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n\n      valueNode = [React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, int), decimal && React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\n\nexport default StatisticNumber;"]},"metadata":{},"sourceType":"module"}